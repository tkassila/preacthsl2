import {h, p, Component, render } from 'preact';

import IntermediateStop from './IntermediateStop';
import StaticFunctions from '../util/StaticFunctions';
import NearestStops from '../neareststops/NearestStops';
import Config from '../util/Config';
import {useState} from 'preact/hooks'

function useIntermediateStops(props) {
    const [intermediates, setIntermediates] = useState(null);

        if (Config.bDebug)
        {
            console.log("LegStep constructor");
            console.log("legdata");
            console.log(props.legdata);
            console.log("legdata.intermediateStops");
            console.log(props.legdata.intermediateStops);
        }

        let tmpintermediates = null;
        if (props.legdata.intermediateStops != null && props.legdata.intermediateStops.length > 0)
        { 
            if (Config.bDebug)
            {           
            console.log("props.legdata.intermediatePlaces: ");
            console.log(props.legdata.intermediatePlaces);
            console.log("props.legdata.intermediateStops: ");
            console.log(props.legdata.intermediateStops);
            }
            tmpintermediates = StaticFunctions.assignArrItems(props.legdata.intermediateStops, props.legdata.intermediatePlaces);
            if (Config.bDebug)
            {
            console.log("intermediates: ");
            console.log(tmpintermediates);
            }            
        }
        setIntermediates(tmpintermediates);
        
    return { intermediates };
  }

function LegStep (props) {
  
   /* constructor(props) {
        super(props);
        console.log("LegStep constructor");
        console.log("legdata");
        console.log(this.props.legdata);
        console.log("legdata.intermediateStops");
        console.log(this.props.legdata.intermediateStops);

        let intermediates = null;
        if (props.legdata.intermediateStops != null && props.legdata.intermediateStops.length > 0)
        {            
            console.log("props.legdata.intermediatePlaces: ");
            console.log(props.legdata.intermediatePlaces);
            console.log("props.legdata.intermediateStops: ");
            console.log(props.legdata.intermediateStops);
            intermediates = StaticFunctions.assignArrItems(props.legdata.intermediateStops, props.legdata.intermediatePlaces);
            console.log("intermediates: ");
            console.log(intermediates);
        }
        this.state = { 
            intermediates: intermediates,
            legClicked: props.legClicked       
        }
        */

       const { intermediates } = useIntermediateStops(props);
       let legname = props.legdata.mode;
       if (Config.bDebug)
       {
            console.log("legname: ");
            console.log(legname);
       }
       let starttime = null;
       let duration = StaticFunctions.getSecondsIntoMinutes(props.legdata.duration);
       if (legname == "WALK")
           starttime = StaticFunctions.getToStringFromEndTime(props.legdata.startTime, props.legdata.arrivalDelay);
       else
           starttime = StaticFunctions.getToStringFromEndTime(props.legdata.startTime, props.legdata.arrivalDelay);
                   

        if (Config.bDebug)
        {
            console.log("LegStep:render");
            console.log("LegStep:intermediates");
            console.log(intermediates);
        }      
        if (intermediates != null && 
            intermediates.length > 0) 
        {            
            const intermediateStops = intermediates.map((istop, ind) => {
                <IntermediateStop id={"intermediateStop" +ind} index={ind}
            legdata={istop}/> });
            
            if (Config.bDebug)
                console.log("-LegStep:intermediateStops" +intermediateStops);
        
                if (intermediateStops != null)
                console.log("-LegStep:intermediateStops nro" +intermediateStops.length);
                    if (intermediateStops !== null) // href={"intermediateStopA" +props.id} 
                        return (<div id={"leglinkdiv"+props.id}>
                            <a id={"leglinkdivlink" +props.id} s
                            href=""
                            >{starttime} {StaticFunctions.getLegName(props.legdata)} Määränpäähän 
                            {StaticFunctions.getRoundedMeterDistance(props.legdata.distance)} 
                            Kesto {duration}</a> 
                            <ul role="listbox" aria-label="välipysähdys" >{intermediateStops}</ul>
                            </div>);
                    else
                        return (<div id={"leglinkdiv" +props.id}>{starttime} 
                            {StaticFunctions.getLegName(props.legdata)} Määränpäähän {StaticFunctions.getRoundedMeterDistance(props.legdata.distance)} Kesto {duration}
                            </div>);        
        }
        else
            return (
            <div id={"leglinkdiv" +props.id}>{starttime} {StaticFunctions.getLegName(props.legdata)} Määränpäähän {StaticFunctions.getRoundedMeterDistance(props.legdata.distance)} Kesto {duration}
            </div>);
}

export default LegStep;