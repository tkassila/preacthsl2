import React, { Component } from 'react';
import GiveAddress from './GiveAddress';
import AddressList from './AddressList';
import gql from "apollo-boost";
import SearchAndListAddressStops from './searchstops/SearchAndListAddressStops';
import axios from 'axios';
import { withApollo } from 'react-apollo';
import Config from '../util/Config';

class NearestStops extends Component 
{

    static getHslBaseUrl()
    {
        let hsl_baseurl = null;
        if (window.location.origin) {
            hsl_baseurl = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':8080/hsl/' : ':8080/hsl/');
           console.log("this.hsl_baseurl");
            console.log(this.hsl_baseurl);
        }
        return hsl_baseurl;
    }

    // address_search_url = "https://api.digitransit.fi/geocoding/v1/search?text=";
    hsl_baseurl = "http://localhost:81NearestStops makeGetQuery before: axios:080/hsl/";
    // hsl_baseurl = window.location.href +":8080/hsl/";
    address_search_url = NearestStops.getHslBaseUrl() +"geocoding/v1/search?text=";
    prev_features = null;

    constructor(props) {
        super(props);
        console.log("NearestStops constructor");
        if (this.props.client)
            this.client = this.props.client;

//        console.log("window.location.href");
//        console.log(window.location.href);
        // hsl_baseurl = window.location.href.
        if (window.location.origin) {
            this.hsl_baseurl = NearestStops.getHslBaseUrl();
           console.log("this.hsl_baseurl");
            console.log(this.hsl_baseurl);
        }
        this.address_search_url = this.hsl_baseurl +"geocoding/v1/search?text=";
          
        this.state = {
            searchstops: false,
            address: null,
            addressfeatures: null,
	    distance: null
        }
    }

    handleResponseData(response)
    {
        console.log("NearestStops handleResponseData");
            let i = 0;
            let bSearch = false;
            const features = response.data.features;
            let feature, coordinates, street;
            let bExactAdressFound = false;

            for (i in features) {
                feature = features[i];
                coordinates = feature.geometry.coordinates;
                street = feature.properties.name;            
                console.log("coordinates:" +coordinates);
                console.log("street:" +street);
                console.log("this.state.address:" +this.state.address);
                
                if (street != null && street.toString() == this.state.address.toString())
                {
                    bExactAdressFound = true;
                    console.log("bExactAdressFound:" +bExactAdressFound);
                    break;
                }
            } 

            if (bExactAdressFound)
            {
                console.log("bExactAdressFound2:" +bExactAdressFound);
                let addressfeature = new Object();
               if (this.state.address.length > 0)
                    bSearch = true;
                let afeatures = [ feature ];
                this.setState({ searchstops: bSearch });
                this.setState( { addressfeatures: afeatures } );
            }
            else
            {
                console.log("features for 2:");
                /*
                for (i in features) {
                    feature = features[i];
                    coordinates = feature.geometry.coordinates;
                    street = feature.properties.name;            
                    console.log("coordinates:" +coordinates);
                    console.log("street:" +street);
                }     
                */
                if (this.state.address.length > 0)
                    bSearch = true;
                this.setState({ searchstops: bSearch });
                this.setState( { addressfeatures: features } );
              // this.render();
            }
            //console.log(coordinates);
         //   this.render();
    }

    makeGetQuery(addressparam)
    {
        if (!addressparam || addressparam.length == 0 )
        {
            this.setState( { addressfeatures: null } );
            return;
        }
        console.log("NearestStops makeGetQuery before: axios:" );
        const test = this.address_search_url +addressparam;
        console.log("url:" +test  );
         const decodedurl = this.address_search_url +encodeURIComponent(addressparam);
         console.log("decodedurl:" +decodedurl  );
        axios.get(decodedurl)
            .then(response => this.handleResponseData(response));
    }

    addresssSelected = (addressparam) => {
        console.log("NearestStops addresssSelected.addressparam=" +addressparam);
        this.setState({
            address: addressparam
        });
        let bSearch = false;
        if (addressparam.length > 0)
        {
            bSearch = true;
            this.setState({
                searchstops: bSearch,
                address: addressparam
            });
        }
        this.makeGetQuery(addressparam);
     
     console.log("bSearch2");
      }

    render() {
        console.log("NearestStops render()");
        const search = this.state.searchstops && this.state.addressfeatures;
        console.log("NearestStops search?" +search);
        console.log(this.state.addressfeatures);
        let searchAndListAddressStops = null;
        if (search)
        searchAndListAddressStops = <SearchAndListAddressStops address={this.state.address} distance={this.state.distance} 
            addressfeatures={this.state.addressfeatures} addresssselected={this.addresssSelected}/>;


        return (
            <div>
            <GiveAddress addresssselected={this.addresssSelected}/> 
            <AddressList addresssselected={this.addresssSelected} distance={this.state.distance} />
	    {searchAndListAddressStops}
            </div>
        );
    }
}

export default withApollo(NearestStops);
